// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: protos/parse.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Parse service

func NewParseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Parse service

type ParseService interface {
	Info(ctx context.Context, in *ParseReq, opts ...client.CallOption) (*ParseRsp, error)
	Score(ctx context.Context, in *ParseReq, opts ...client.CallOption) (*ParseRsp, error)
}

type parseService struct {
	c    client.Client
	name string
}

func NewParseService(name string, c client.Client) ParseService {
	return &parseService{
		c:    c,
		name: name,
	}
}

func (c *parseService) Info(ctx context.Context, in *ParseReq, opts ...client.CallOption) (*ParseRsp, error) {
	req := c.c.NewRequest(c.name, "Parse.Info", in)
	out := new(ParseRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parseService) Score(ctx context.Context, in *ParseReq, opts ...client.CallOption) (*ParseRsp, error) {
	req := c.c.NewRequest(c.name, "Parse.Score", in)
	out := new(ParseRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Parse service

type ParseHandler interface {
	Info(context.Context, *ParseReq, *ParseRsp) error
	Score(context.Context, *ParseReq, *ParseRsp) error
}

func RegisterParseHandler(s server.Server, hdlr ParseHandler, opts ...server.HandlerOption) error {
	type parse interface {
		Info(ctx context.Context, in *ParseReq, out *ParseRsp) error
		Score(ctx context.Context, in *ParseReq, out *ParseRsp) error
	}
	type Parse struct {
		parse
	}
	h := &parseHandler{hdlr}
	return s.Handle(s.NewHandler(&Parse{h}, opts...))
}

type parseHandler struct {
	ParseHandler
}

func (h *parseHandler) Info(ctx context.Context, in *ParseReq, out *ParseRsp) error {
	return h.ParseHandler.Info(ctx, in, out)
}

func (h *parseHandler) Score(ctx context.Context, in *ParseReq, out *ParseRsp) error {
	return h.ParseHandler.Score(ctx, in, out)
}
